a123
bbb
c12
w2w
a+c
b+d
m+nnn
a*--a
a*(b+c)
a*(--b)*(-b)
a*(b*c)
---a*a
a*---a
(b*c)*(a * (--a + a) *(b))*(-c *b*a)*(B) * (-B + -((-(-(B * C + C * A * C) * C + (A + B) * (C + B) * C * C)) * B))
(b*c)*(a * (--a + a) *(b))*(-c *b*a)*(B) * -B + -((-(-(B * C + C * A * C) * C + (A + B) * (C + B) * C * C)) * B)
(-(AB * B + C) * (C + B * A) * AB * (C + A) * AB * AB * (A) * (AA + -AA * (A + B)) * A * A * AB * AA) * ((A + -B) * (C+D)) * (-C * D)
(-(AB * B + C) * (C + B * A) * AB * (C + A) * AB * AB * (A) * (AA + -AA * (A + B)) * A * A * AB * AA) * ((A + -B) * (C+D)) * (-C * D + C*D)
(-(AB * B + C) * (C + B * A) * AB * (C + A) * AB * AB * (A) * (AA + -AA * (A + B)) * A * A * AB * AA) * ((A + -B) * (C+D)) * (-C * D + C*D + A*B*C)
((AB * B + C) * (C + B * A) * AB * (C + A) * AB * AB * (A + C) * (AA + -AA * (A + B)) * A * A * AB * AA) * ((A + -B) * (C+D)) * (-C * D + C*D + A*B*C)
((b*c)*(a * (--a + a) *(b))*(-c *b*a)*(B) * (-B + -((-(-(B * C + C * A * C) * C + (A + B) * (C + B) * C * C)) * B))) * (--(AB) * (A + AA) * AB * A * AA + (A + C + B) * -(C) * AA + -(B + AA + AA) * A * AB + AA * AB + B + B)
((--AB * AA + C + CD + B) * -(C + CD) * AA * A * aA1a * AB + (CD * AS1D + CD) * -AS1D * AS1D + CD + aA1a + AS1D + CD) * (-(AB * A * A + A * C + C + aA1a) * (AA * C + CD) * CD * B + CD * aA1a + B * -AS1D * B + A + CD + B) * (((C) * AA + -(aA1a + AB) * AB + AA * aA1a + B + CD) * ---(aA1a) * (A) * AA * aA1a + (AS1D * aA1a + AB) * B + AB + AS1D + AB) * (---((UC) * aA1a * B + UC + AS1D + AB) * --AA * aA1a * (C) * AA + --(AB + AB) * C * AB * UC + -AA * AA * aA1a + AS1D + UC)
((--AB * AA + C + CD + B) * -(C + CD) * AA * A * aA1a * AB + (CD * AS1D + CD) * -AS1D * AS1D + CD + aA1a + AS1D + CD) * (-(AB * A * A + A * C + C + aA1a) * (AA * C + CD) * CD * B + CD * aA1a + B * -AS1D * B + A + CD + B) * (((C) * AA + -(aA1a + AB) * AB + AA * aA1a + B + CD) * ---(aA1a) * (A) * AA * aA1a + (AS1D * aA1a + AB) * B + AB + AS1D + AB) * (---((UC) * aA1a * B + UC * AS1D *- AB) * --AA * aA1a * (C) * AA + --(AB + AB) * C * AB * UC + -AA * AA * aA1a + AS1D + UC)
((--AB * AA + C * CD * B) * -(C + CD) * AA * A * aA1a * AB * (CD * AS1D + CD) * -AS1D * AS1D + CD + aA1a + AS1D + CD) * (-(AB * A * A + A * C + C + aA1a) * (AA * C + CD) * CD * B + CD * aA1a + B * -AS1D * B + A + CD + B) * (((C) * AA + -(aA1a + AB) * AB + AA * aA1a + B + CD) * ---(aA1a) * (A) * AA * aA1a + (AS1D * aA1a + AB) * B + AB + AS1D + AB) * (---((UC) * aA1a * B + UC * AS1D *- AB) * --AA * aA1a * (C) * AA + --(AB + AB) * C * AB * UC + -AA * AA * aA1a + AS1D + UC) * ((AA * CD + B + AB) * --(A) * --AB * aA1a * UA + (aA1a + UC) * -CD * C * UC + A * (C) * AA + aA1a * AA * AS1D + B) * (B + C + CD) * (CD + ---UC)
((--AB * AA + C * CD * B) * -(C + CD) * AA * A * aA1a * AB * (CD * AS1D + CD) * -AS1D * AS1D + CD + aA1a + AS1D + CD) * (-(AB * A * A + A * C + C + aA1a) * (AA * C + CD) * CD * B + CD * aA1a + B * -AS1D * B + A + CD + B) * (((C) * AA + -(aA1a + AB) * AB + AA * aA1a + B + CD) * ---(aA1a) * (A) * AA * aA1a + (AS1D * aA1a + AB) * B + AB + AS1D + AB) * (---((UC) * aA1a * B + UC * AS1D *- AB) * --AA * aA1a * (C) * AA + --(AB + AB) * C * AB * UC + -AA * AA * aA1a + AS1D + UC) * ((AA * CD + B + AB) * --(A) * --AB * aA1a * UA + (aA1a + UC) * -CD * C * UC + A * (C) * AA + aA1a * AA * AS1D + B) * (B + C + CD) * (CD + ---UC) * ((C * UC + UA + aA1a) * --(C * AS1D + A + aA1a) * (UA) * C + (aA1a + UA + B) * B * UA * aA1a + A * AA + aA1a * UA * UC * UC + UC + AA + AA)
((--AB * AA * -C * CD * B) * -(C * CD) * AA * -A * aA1a * AB * (CD * AS1D + CD) * -AS1D * AS1D + CD + aA1a + AS1D + CD) * (-(AB * A * A + A * C + C + aA1a) * (AA * C + CD) * CD * B + CD * aA1a + B * -AS1D * B + A + CD + B) * (((C) * AA + -(aA1a + AB) * AB + AA * aA1a + B + CD) * ---(aA1a) * (A) * AA * aA1a + (AS1D * aA1a + AB) * B + AB + AS1D + AB) * (---((UC) * aA1a * B * UC * AS1D *- AB) * --AA * aA1a * (-C) * -AA * --(AB + AB) * C * AB * UC * -AA * AA * aA1a * AS1D + UC) * ((AA * CD + B + AB) * --(A) * --AB * aA1a * UA * (-aA1a + UC) * CD * C * UC * A * (C) * AA + aA1a * AA * AS1D + B) * (B + C + CD) * (CD + ---UC) * ((C * UC + UA + aA1a) * --(C * AS1D + A + aA1a) * (UA) * C + (aA1a + UA + B) * B * UA * aA1a + A * AA + aA1a * UA * UC * UC + UC + AA + AA) * ((C * A + A) * C * -C * B + A + A + UC + C) * ((A + A) * B * A + UC * UA + UC * UC * UC * A) * (-C * -AB * UC)
((--AB * AA ) * -(C * CD) * AA * -A * aA1a * AB * (CD * AS1D + CD) * -AS1D * AS1D + CD + aA1a + AS1D + CD) * (-(AB * A * A + A * C + C + aA1a) * (AA * C + CD) * CD * B + CD * aA1a + B * -AS1D * B + A + CD + B) * (((C) * AA + -(aA1a + AB) * AB + AA * aA1a + B + CD) * ---(aA1a) * (A) * AA * aA1a + (AS1D * aA1a + AB) * B) * (---((UC) * aA1a * B * UC * AS1D *- AB) * --AA * aA1a * (-C) * -AA * --(AB * AB) * C * AB * UC * -AA * AA * aA1a * AS1D + UC) * ((AA * CD + B + AB) * --(A) * --AB * aA1a * UA * (-UC) * CD * C * UC * A * (C) * AA * aA1a * AA * AS1D + B) * (B + C + CD) * (CD + ---UC) * ((C * UC + UA + aA1a) * --(C * AS1D + A + aA1a) * (UA) * C + (aA1a + UA + B) * B * UA * aA1a + A * AA + aA1a * UA * UC * UC + UC + AA + AA) * ((C * A + A) * C * -C * B + A + A + UC + C) * ((A + A) * B * A + UC * UA + UC * UC * UC * A) * (-C * -AB * UC) * ((UC) * A * UC + (A) * -C * C + AA * A + C + B) *(-(A + A) * B * C) * (--UA * (AA + A) * A + A * AA + AA * AA * A * UC)
(--------((v7 + v4) * vVV + v7 * v4 * v2v + v8 + vVV) * ((UC + v11) * vVV + -v11 * v11 + vVV + UA) * -(v8) * -(v12) * v2v * v9 * (v11 * UC * v5 + vVV + v5 * v5 + v1) * (v4 * -v2v + v6) * v4 * v4 * -v1 + (-UC + B) * (v7 + -v6) * v8 * -v9 * v2v + (v10 + v12) * ---v9 * v7 * v2 + (v8) * AA * B ) *((-vVV * UA * v2v + -A * v5 * A + vVV + v8) * (UC * A * UA + v7 * AA + UC) * (v3 * B + v5 + v2 + v4) * -(A) * UA * v2v + --(v12 * v5 * A + AA + v11) * (v6 * v2 + v5 + A) * vVV * A * -v5 * v2 + --v4 * -v2v * v2 + (v3) * v11 * A * v11 + v12 * AA + AA * v8 + v12) * (-((v1) * (v2) * vVV * UA + v6 * AA) * -((vVV) * v8 * v5 * UA + -v2 * UA + B + UA) * ((AA + A) * UA * -AA * UA + vVV + -v2v + v5) * --AA * -v1 * v6 + -((v2v + v1) * UC * v7) * (-v10 * v2v + UA * UC + UA) * (v3) * v4 * -AA * v1 + (v12 * UC + C * v7 + v2v + v11) * (v12) * v3 + v7 * v1 + v11 * vVV + v1 + v6) * (((A + B) * (vVV) * -A * v1 * -v8 * AA + A * (v1 + B) * A + v9 + UC) * -(-(v3) * v12 * v6 + v8 + v7 * v4 + v2) * (v10 + B * AA + v2 + v2) * -(v9 * UC + v8) * B * v11 * AA + (v5 * v11 + UC + v10 + v7) * (v12 + AA) * (v4 * vVV + AA) * (UA * v1 ) * v4 * v7 * --A * --(C) * -UC + -(UC + v2 * A) * -v3 * -UC * v10 + AA * B + v4 + v1) * (---(-((AA) * AA + v7 + v10) * --vVV * -v3 + -v2 * vVV * -AA + v8 * v1 * A + A * v10 * v9 + v9 * UA + AA) * (--(v4) * (v2) * v1 + (v7) * v2v + v1 * v2 + v12) * (v6 + UA + C) * (UC * A + v11 + v3) * v7 * B + --(-AA * v5 * v7 + v4 * v8 + v5 + v11) * ---(v12 + v1) * -v7 * (v2 + v8) * v9 + -(C + v1) * v3 * C + (AA) * v8 + v2 * B * v1 * v11 + v7 + v12) * (-C * UC * A + vVV * AA + v2v * v7 * v2v) * ((UC * v1 + v9) * -AA * v12 * v8)
(--------((v7 + v4) * vVV + v7 * v4 * v2v + v8 + vVV) * ((UC + v11) * vVV + -v11 * v11 + vVV + UA) * -(v8) * -(v12) * v2v * v9 * (v11 * UC * v5 + vVV) * (v4 * -v2v + v6) * v4 * v4 * -v1 * (v7 + -v6) * v8 * -v9 * v2v + (v10 + v12) * ---v9 * v7 * v2 + (v8) * AA * B ) *((-vVV * UA * v2v + -A * v5 * A + vVV + v8) * (UC * A * UA + v7 * AA + UC) * (v3 * B + v5 + v2 + v4) * -(A) * UA * v2v + --(v12 * v5 * A + AA + v11) * (v6 * v2 + v5 + A) * vVV * A * -v5 * v2 + --v4 * -v2v * v2 + (v3) * v11 * A * v11 + v12 * AA + AA * v8 + v12) * (-((v1) * (v2) * vVV * UA) * -((vVV) * v8 * v5 * UA + -v2 * UA + B + UA) * ((AA * A) * UA * -AA * UA + vVV + -v2v + v5) * --AA * -v1 * v6 + -((v2v + v1) * UC * v7) * (-v10 * v2v + UA * UC + UA) * (v3) * v4 * -AA * v1 + (v12 * UC + C * v7 + v2v + v11) * (v12) * v3 + v7 * v1 + v11 * vVV + v1 + v6) * (((A + B) * (vVV) * -A * v1 * -v8 * AA + A * (v1 + B) * A + v9 + UC) * -(-(v3) * v12 * v6 + v8 + v7 * v4 + v2) * (v10 + B * AA + v2 + v2) * -(v9 * UC + v8) * B * v11 * AA + (v5 * v11 + UC + v10 + v7) * (v12 + AA) * (v4) * (UA * v1 ) * v4 * v7 * --A * --(C) * -UC * -(UC + v2 * A) * -v3 * -UC * v10 + AA * B + v4 + v1) * (---(-((AA) * AA + v7 + v10) * --vVV * -v3 + -v2 * vVV * -AA + v8 * v1 * A + A * v10 * v9 + v9 * UA + AA) * (--(v4) * (v2) * v1 + (v7) * v2v + v1 * v2 + v12) * (v6 + UA + C) * (UC * A + v11 + v3) * v7 * B + --(-AA * v5 * v7 + v4 * v8 + v5 + v11) * ---(v12 + v1) * -v7 * (v2 + v8) * v9 + -(C + v1) * v3 * C + (AA) * v8 + v2 * B * v1 * v11) * (-C * UC * A + vVV * AA + v2v * v7 * v2v) * ((UC * v1 + v9) * -AA * v12 * v8) *(v8 * -v5 * v2v * v9 + UC * v1 * -v10 + -v1 * v12 + -B) * ((v10 + v1 + C) * -v9 + -v9 * -v3 * -UA) * ((v2v * v5 + vVV) * UC * v7 + v11 * vVV + v10 * v4 + v8) * (-v2 * UC * UA + v11 * v5 + B * v8) * (-(v12 * v9 + UA) * (B) * v2v * v1 + (v1) * v7) * ((A * v11 + v1) * UA * vVV + (v11) * UA) * (-(v11 * v1 + v1) * v2v + -(v1) * v3 * C)
(--------((v7 + v4) * vVV + v7 * v4 * v2v + v8 + vVV) * ((UC + v11) * vVV + -v11 * v11 + vVV + UA) * -(v8) * -(v12) * v2v * v9 * (v11 * UC * v5 + vVV + v5 * v5 + v1) * (v4 * -v2v + v6) * v4 * v4 * -v1 + (-UC + B) * (v7 + -v6) * v8 * -v9 * v2v + (v10 + v12) * ---v9 * v7 * v2 + (v8) * AA * B ) *((-vVV * UA * v2v + -A * v5 * A + vVV + v8) * (UC * A * UA + v7 * AA + UC) * (v3 * B + v5 + v2 + v4) * -(A) * UA * v2v + --(v12 * v5 * A + AA + v11) * (v6 * v2 + v5 + A) * vVV * A * -v5 * v2 + --v4 * -v2v * v2 + (v3) * v11 * A * v11 + v12 * AA + AA * v8 + v12) * (-((v1) * (v2) * vVV * UA + v6 * AA) * -((vVV) * v8 * v5 * UA + -v2 * UA + B + UA) * ((AA + A) * UA * -AA * UA + vVV + -v2v + v5) * --AA * -v1 * v6 + -((v2v + v1) * UC * v7) * (-v10 * v2v + UA * UC + UA) * (v3) * v4 * -AA * v1 + (v12 * UC + C * v7 + v2v + v11) * (v12) * v3 + v7 * v1 + v11 * vVV + v1 + v6) * (((A + B) * (vVV) * -A * v1 * -v8 * AA + A * (v1 + B) * A + v9 + UC) * -(-(v3) * v12 * v6 + v8 + v7 * v4 + v2) * (v10 + B * AA + v2 + v2) * -(v9 * UC + v8) * B * v11 * AA + (v5 * v11 + UC + v10 + v7) * (v12 + AA) * (v4 * vVV + AA) * (UA * v1 ) * v4 * v7 * --A * --(C) * -UC + -(UC + v2 * A) * -v3 * -UC * v10 + AA * B + v4 + v1) * (---(-((AA) * AA + v7 + v10) * --vVV * -v3 + -v2 * vVV * -AA + v8 * v1 * A + A * v10 * v9 + v9 * UA + AA) * (--(v4) * (v2) * v1 + (v7) * v2v + v1 * v2 + v12) * (v6 + UA + C) * (UC * A + v11 + v3) * v7 * B + --(-AA * v5 * v7 + v4 * v8 + v5 + v11) * ---(v12 + v1) * -v7 * (v2 + v8) * v9 + -(C + v1) * v3 * C + (AA) * v8 + v2 * B * v1 * v11 + v7 + v12) * (-v2 * v1 * B * v4 + -v2 * v10 * v2v + C + C + v1)